# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eF3tLWQvQlZWzpYqX2FRU2110RP8rDE7
"""



"""<h1 style="text-align: center; color: purple;">Atividade 02 - Curso em Machine Learning<h1>

<h2> Tema: Algoritmos básicos de programação em linguagem python e análise de dados.</h2>

"""

#@title import
import random
from random import randint
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns



"""# Parte 01: Questões dissertativas sobre python

## 1.1 - Escreva uma função que receba uma lista de números e retorne outra lista com os números ímpares.
"""

# criar uma lista com 20 numeros de 999 a 9999
def create_random_list():
  return [random.randint(999, 9999) for _ in range(20)]

# --- Exemplo de como usar a função ---
list_of_numbers= create_random_list()

print("Lista de 20 números aleatórios:")
print(list_of_numbers)

print(f"\nTotal de números na lista: {len(list_of_numbers)}")

# listar os numeros impares
def find_odd_numbers(list_of_numbers):
  odd_numbers = []
  for numbers in list_of_numbers:
    if numbers % 2 != 0:
      odd_numbers.append(numbers)
  return odd_numbers

odd_numbers = find_odd_numbers(list_of_numbers)

print("\nLista de números ímpares:")
print(odd_numbers)

"""## 1.2 - Escreva uma função que receba uma lista de números e retorne outra lista com os números primos presentes.

"""

# criar uma lista com 20 numeros de 0 a 99
def create_random_list():
  return [random.randint(0, 99) for _ in range(20)]

# --- Exemplo de como usar a função ---
list_of_numbers= create_random_list()

print("Lista de 20 números aleatórios:")
print(list_of_numbers)

print(f"\nTotal de números na lista: {len(list_of_numbers)}")

# verificar os numeros primos
def eh_primo(list_of_numbers):
  if list_of_numbers < 2:
    return False
  for i in range(2, list_of_numbers):
    if list_of_numbers % i == 0:
      return False
  return True

# encontrar os numeros primos da lsita
def find_prime_numbers(list_of_numbers):
  prime_numbers = []
  for numbers in list_of_numbers:
    if eh_primo(numbers):
      prime_numbers.append(numbers)
  return prime_numbers

print("\nLista de números primos:")
print(find_prime_numbers(list_of_numbers))

"""## 1.3 - Escreva uma função que receba duas listas e retorne outra lista com os elementos que estão presentes em apenas uma das listas.

"""

def exclusivos(lista1, lista2):
    return list(set(lista1) ^ set(lista2))

lista_b: [92, 22, 8, 68, 18, 32, 82, 40, 90, 9]
lista_a: [35, 90, 61, 30, 3, 95, 37, 68, 55, 12]

resultado = exclusivos(lista_a, lista_b)
print("Elementos exclusivos:", resultado)

"""## 1.4 - Dada uma lista de números inteiros, escreva uma função para encontrar o segundo maior valor na lista."""

# aproveitando a lista de elementos exclusivos
lista = exclusivos(lista_a, lista_b)
print("Elementos exclusivos:", resultado)

# função para encontrar o segundo numero maior da lista
def find_second_largest(lista):
    if len(lista) < 2:
        return (" A lista deve ter pelo menos dois valores distintos.")
    lista_ordenada = sorted(lista, reverse=True)
    return lista_ordenada[1]
print("Segundo maior número da lista", find_second_largest(lista))

"""## 1.5 - Crie uma função que receba uma lista de tuplas, cada uma contendo o nome e a idade de uma pessoa, e retorne a lista ordenada pelo nome das pessoas em ordem alfabética."""

def ordenar_por_nome(lista_pessoas):
    return sorted(lista_pessoas, key=lambda pessoa: pessoa[0].lower())

# Exemplo de uso:
pessoas = [
    ("Daenerys Targaryen", 25),
    ("Sansa Stark", 20),
    ("Xaro Xoan Daxos", 22),
    ("Robert Baratheon", 28),
    ("Jaime Lannister", 36),
    ("Jorah Mormont",48),
    ("Jon Snow",21),
    ("Khal Drogo",26)
]

ordenadas = ordenar_por_nome(pessoas)
print("Lista ordenada por nome:\n")
for nome, idade in ordenadas:
    print(f"{nome} - {idade} anos")

"""# Parte 02: Questões sobre visualização e análise de dados

## 2.1 Como identificar e tratar outliers em uma coluna numérica usando desvio padrão ou quartis?

Para identificar outliers se deve calcular a media e o desvio padrão, sendo considerado outliers quando o valor estiver muito distante da média, como mais de três desvios padrão:

Para identificar outliers em uma coluna numérica, é comum utilizar a média e o desvio padrão. Um valor é considerado outlier quando está significativamente distante da média, normalmente mais de 3 desvios padrão acima ou abaixo dela.

$outlier ⟺ x <μ − 3σ$  ou $x > μ + 3σ$


$μ$ = média dos dados

$σ$ = desvio padrão

Possiveis tratamentos:
 - Substituir pela media, mediana ou moda
 - outra possibilidade é remover estes valores se não for comprometer
 - ou manter os outliers apos investigação mais detalhada onde representa uma realidade

`Exemplo:` utilizando o dataset tips da biblioteca Seaborn sobre gorgetas em um restaurante
"""

# Carregando o dataset "tips"
df = sns.load_dataset("tips")
df.head()

df.describe()

# calcular a média e o desvio padrão
media = df['total_bill'].mean()
desvio_padrao = df['total_bill'].std()
desvio_padrao

# definir os limites inferior e o limite superior
limite_inferior = media - 3 * desvio_padrao
limite_superior = media + 3 * desvio_padrao
print(f"Limite inferior: {limite_inferior}")
print(f"Limite superior: {limite_superior}")

# Identificar os outliers
outliers = df[(df['total_bill'] < limite_inferior) | (df['total_bill'] > limite_superior)]
outliers

#plotar os dados
plt.figure(figsize=(10, 6))
sns.histplot(df['total_bill'], bins=20, kde=True, color = '#a550b2')
plt.axvline(limite_inferior, color='red', linestyle='--', label='Limite Inferior')
plt.axvline(limite_superior, color='blue', linestyle='--', label='Limite Superior')
plt.title("Distribuição da Conta Total (total_bill)")
plt.xlabel("Valor da Conta")
plt.ylabel("Frequência")
plt.legend()
plt.show()

"""## 2.2 - Como concatenar vários DataFrames (empilhando linhas ou colunas),mesmo que tenham colunas diferentes?

Dica:
Utiliza-se pd.concat() especificando axis=0 (linhas) ou axis=1
(colunas). Quando há colunas diferentes, os valores ausentes são
preenchidos com NaN.

```python
# estrutura base

pd.concat([df1, df2], axis=0)  # Empilha pelas linhas

pd.concat([df1, df2], axis=1)  # Empilha pelas colunas

```
"""

# exemplo utilizando o dataset anterior Tips

# carregar dataset tips
df1 = sns.load_dataset("tips")
df1.head()

# Criando o segundo DataFrame diferente tendo como base o tips

df2 = df1[['total_bill', 'tip']].copy()
df2['cliente_id'] = range(len(df2))  # Adiciona nova coluna
df2 = df2.rename(columns={'total_bill': 'conta_total'})  # Renomeia coluna

df2.head()

#@title  Concatenar por LINHAS (axis=0)
concat_linhas = pd.concat([df1, df2], axis=0)

# Mostrar os resultados
print("Concatenado por LINHAS (colunas diferentes):")
print(concat_linhas.head(10))

#@title  Concatenar por COLUNAS (axis=1)
concat_colunas = pd.concat([df1, df2], axis=1)

# Mostrar os resultados
print("\nConcatenado por COLUNAS:")
concat_colunas.head(5)

"""## 2.3 - Utilizando pandas, como realizar a leitura de um arquivo CSV em um DataFrame e exibir as primeiras linhas?

"""

# utilizando um dataset que tenho em no colab
df_housing = pd.read_csv("/content/sample_data/california_housing_train.csv") # leitura do dataset
df_housing.head() # exibir as 5 primeiras linhas do dataset

"""##  2.4 - Utilizando pandas, como selecionar uma coluna específica e filtrar linhas em um “DataFrame” com base em uma condição?"""

# utilizando o dataframe tips  selecionar o todos os clientes Female

# Carregar o dataset "tips"
df = sns.load_dataset('tips')

# Filtrar apenas os clientes do sexo feminino
females = df[df['sex'] == 'Female']

# Exibir os dados filtrados
print(females.head())  # Mostra as 5 primeiras linhas

# agora selecionor as clientes do sexo feminino que dao gorgetas maior que 5 dolares

mulheres_gorjetas_altas = df[(df['sex'] == 'Female') & (df['tip'] > 5)]

# Exibir o resultado
print("Mulheres que deram gorjetas maiores que 5 dólares:")
print(mulheres_gorjetas_altas)

"""## 2.5 - Utilizando pandas, como lidar com valores ausentes (NaN) em um DataFrame?

**Irei exemplificar com o dataframe acima onde concatenamos dois dataFrame**
"""

# dataFrame que iremos utilizar
concat_linhas.head()

#@title Verificar se possui valores ausentes
concat_linhas.isnull().sum()

#@title Remover valores ausentes
# removendo linhas NaN
concat_linhas.dropna(inplace=True)
concat_linhas.isnull().sum()

# removendo colunas com NaN
concat_linhas.dropna(axis=1, inplace=True)
concat_linhas.isnull().sum()

#@title Preencher valores ausentes

#@title Preencher com valor fixo
df_housing.fillna(120, inplace=True)
df_housing.isnull().sum()

#@title Preencher com a média da coluna
df['total_bill'] = df['total_bill'].fillna(df['total_bill'].mean())

#@title Preencher com a mediana da coluna
df['total_bill'] = df['total_bill'].fillna(df['total_bill'].median())

#@title Preencher com o valor anterior (forward fill)
df.ffill(inplace=True)

#@title Preencher com o próximo valor válido (backward fill)
df.bfill(inplace=True)

#@title exemplo com o dataset do titanic

# Carrega um dataset com alguns valores ausentes
data = sns.load_dataset('titanic')

# Mostrar valores ausentes por coluna
print(data.isnull().sum())

# Preencher idade com a média
data['age'] = data['age'].fillna(data['age'].mean())

# Remover todas as linhas com algum valor NaN
data.dropna(inplace=True)

data.isnull().sum()

